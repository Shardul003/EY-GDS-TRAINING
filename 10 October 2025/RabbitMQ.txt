What is RabbitMQ?
Rabbit MQ software that helps different parts of a system communicate with each other asynchronously (without waiting for an immediate response).
RabbitMQ acts like a middleman between systems or services. It receives messages from one application (the producer) and delivers them to another (the consumer).
1. No direct dependency between services. 
2. Many producers/consumers can connect.
3. Ensures message delivery with acknowledgments and retries.
4. Supports multiple protocols like AMQP, MQTT, STOMP.
Working
1. Producer	Sends messages to RabbitMQ
2. Queue	Stores messages until they are processed
3. Consumer	Receives and processes messages
4. Exchange	Routes messages to appropriate queues based on rules
5. Binding	Defines the connection between an exchange and a queue

ADVANTAGES 
1. High Concurrency handling.
2. Fault Tolerance.
3. Lightweight process management.

Why Use a Queue in Real time systems.
Consumers (like analytics processors, databases, or dashboards) might not process data at the same rate.
A queue allows each side to work independently.
If one goes down, the other still works.
Example:
A traffic monitoring system collects vehicle speed data (producer) and updates the dashboard (consumer).
If the dashboard slows down, the queue ensures data isnâ€™t lost.

2. Load Balancing - Queues distribute tasks evenly among multiple consumers. Helps prevent any single consumer from getting overloaded.
Example:
In a ride-hailing app, trip requests go into a queue, and multiple dispatch servers read from it simultaneously.

3. Fault Tolerance & Reliability
If a consumer crashes, the queue can retain unprocessed messages until it comes back online.
Ensures no data loss and guaranteed message delivery.

4. Rate Control (Buffering)
In real-time systems, data can arrive faster than itâ€™s processed.
A queue smooths out the spikes in traffic, preventing overloads.

Real-Time Event Streaming

In complex systems (IoT, finance, analytics), queues act as event pipelines â€” ensuring ordered, reliable, real-time data flow.

ðŸ§  Example:
Stock trading platforms use queues to handle massive real-time data streams from multiple sources without losing messages.

